import sys
sys.stdout.reconfigure(encoding='utf-8')
import random
import markovify
from db_config import get_db_connection

# Функция для обрезки текста
def truncate_text(text, max_length):
    return text[:max_length].strip()

# Получение постов из базы данных для обучения модели
def get_existing_posts():
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "SELECT content FROM posts"
    cursor.execute(query)
    posts = [row[0] for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return posts

# Очистка данных
def clean_text(text):
    # Удаляем лишние пробелы и символы
    text = text.strip()
    # Разделяем текст на предложения
    sentences = text.split(".")
    return [sentence.strip() for sentence in sentences if sentence.strip()]

# Получение данных для обучения
def get_training_data():
    existing_posts = get_existing_posts()
    cleaned_posts = []
    for post in existing_posts:
        cleaned_posts.extend(clean_text(post))
    return cleaned_posts + default_texts

# Создание модели Markovify на основе существующих постов
def create_markov_model():
    training_data = "\n".join(get_training_data())
    print(f"Используется {len(training_data.splitlines())} строк для обучения модели.")
    return markovify.Text(training_data, state_size=2)

# Модификация текста для уникальности
def modify_text(text):
    synonyms = {
        "растёт": ["увеличивается", "развивается", "улучшается"],
        "отлично": ["прекрасно", "замечательно", "хорошо"],
        "сложный": ["трудный", "непростой", "запутанный"],
        "качество": ["уровень", "стандарт", "показатель"]
    }
    random_phrases = [
        "Это важно отметить.", "Это ключевой момент.", "Важно двигаться дальше.",
        "Необходимо учитывать это.", "Это требует внимания."
    ]

    # Замена слов на синонимы
    words = text.split()
    for i, word in enumerate(words):
        if word in synonyms:
            words[i] = random.choice(synonyms[word])
    
    # Добавление случайной фразы
    if random.random() < 0.5:  # С вероятностью 50%
        words.append(random.choice(random_phrases))
    
    return " ".join(words)

# Добавление поста в базу данных
def add_post_to_db(user_id, content):
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "INSERT INTO posts (user_id, content) VALUES (%s, %s)"
    cursor.execute(query, (user_id, content))
    conn.commit()
    cursor.close()
    conn.close()

# Генерация и добавление постов
def generate_posts():
    # Создаем модель Markovify
    text_model = create_markov_model()

    # Получаем список пользователей
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users")
    user_ids = [row[0] for row in cursor.fetchall()]
    cursor.close()
    conn.close()

    for user_id in user_ids:
        for _ in range(random.randint(3, 5)):  # От 3 до 5 постов на пользователя
            max_attempts = 100  # Максимальное количество попыток генерации
            for attempt in range(max_attempts):
                post_content = text_model.make_sentence()
                if post_content:  # Если предложение успешно сгенерировано
                    post_content = truncate_text(post_content, 255)  # Обрезаем до 255 символов
                    
                    # Модифицируем текст для уникальности
                    post_content = modify_text(post_content)
                    
                    break
            else:
                # Если после 100 попыток не удалось сгенерировать, используем фиксированный текст
                fallback_posts = [
                    "Бизнес растёт благодаря командной работе.",
                    "Сегодня был сложный день, но мы справились благодаря поддержке коллег.",
                    "Клиенты довольны нашим сервисом, это мотивирует нас продолжать улучшаться.",
                    "Нужно решить проблему с логистикой, чтобы избежать задержек.",
                    "Команда молодцы, продолжаем в том же духе!",
                    "Это важный этап для нашей компании, каждый шаг имеет значение.",
                    "Наши усилия окупаются сполна, клиенты ценят наш труд.",
                    "Сложности — это возможность для роста, мы учимся на каждом этапе.",
                    "Каждый день приносит новые вызовы, но мы готовы к ним.",
                    "Успех зависит от нашей команды, вместе мы достигнем целей.",
                    "Мы стремимся к совершенству, качество всегда на первом месте.",
                    "Наша цель — удовлетворение клиента, мы работаем ради вас.",
                    "Рост бизнеса требует инвестиций, но результат стоит того.",
                    "Ваше мнение важно для нас, мы всегда открыты к обратной связи.",
                    "Инновации — ключ к успеху, мы внедряем новые технологии.",
                    "Развиваемся вместе с клиентами, их успех — наш успех.",
                    "Каждый проект уникален, мы уделяем внимание деталям.",
                    "Спасибо за доверие, мы ценим каждого клиента.",
                    "Новый продукт запущен, отзывы клиентов превзошли ожидания.",
                    "Работаем над улучшением сервиса, ваш комфорт — наш приоритет.",
                    "Получили положительные отзывы от партнёров, это вдохновляет.",
                    "Новые горизонты открываются перед нами, будущее за нами.",
                    "Качество обслуживания — наша главная задача.",
                    "Мы создаём инновационные решения для вашего бизнеса.",
                    "Каждый сотрудник — часть нашей большой семьи.",
                    "Благодаря вашей поддержке мы достигли новых высот.",
                    "Уверены, что будущее принесёт ещё больше возможностей.",
                    "Мы не боимся трудностей, они делают нас сильнее.",
                    "Вместе мы можем всё, что задумали.",
                    "Наши клиенты — наша главная ценность."
                ]
                post_content = random.choice(fallback_posts)

            add_post_to_db(user_id, post_content)
            print(f"Добавлен пост для пользователя {user_id}: {post_content}")

# Фиксированные примеры текстов
default_texts = [
    "Бизнес растёт благодаря командной работе.",
    "Сегодня был сложный день, но мы справились благодаря поддержке коллег.",
    "Клиенты довольны нашим сервисом, это мотивирует нас продолжать улучшаться.",
    "Нужно решить проблему с логистикой, чтобы избежать задержек.",
    "Команда молодцы, продолжаем в том же духе!",
    "Это важный этап для нашей компании, каждый шаг имеет значение.",
    "Наши усилия окупаются сполна, клиенты ценят наш труд.",
    "Сложности — это возможность для роста, мы учимся на каждом этапе.",
    "Каждый день приносит новые вызовы, но мы готовы к ним.",
    "Успех зависит от нашей команды, вместе мы достигнем целей.",
    "Мы стремимся к совершенству, качество всегда на первом месте.",
    "Наша цель — удовлетворение клиента, мы работаем ради вас.",
    "Рост бизнеса требует инвестиций, но результат стоит того.",
    "Ваше мнение важно для нас, мы всегда открыты к обратной связи.",
    "Инновации — ключ к успеху, мы внедряем новые технологии.",
    "Развиваемся вместе с клиентами, их успех — наш успех.",
    "Каждый проект уникален, мы уделяем внимание деталям.",
    "Спасибо за доверие, мы ценим каждого клиента.",
    "Новый продукт запущен, отзывы клиентов превзошли ожидания.",
    "Работаем над улучшением сервиса, ваш комфорт — наш приоритет.",
    "Получили положительные отзывы от партнёров, это вдохновляет.",
    "Новые горизонты открываются перед нами, будущее за нами.",
    "Качество обслуживания — наша главная задача.",
    "Мы создаём инновационные решения для вашего бизнеса.",
    "Каждый сотрудник — часть нашей большой семьи.",
    "Благодаря вашей поддержке мы достигли новых высот.",
    "Уверены, что будущее принесёт ещё больше возможностей.",
    "Мы не боимся трудностей, они делают нас сильнее.",
    "Вместе мы можем всё, что задумали.",
    "Наши клиенты — наша главная ценность."
]

# Запуск генерации постов
if __name__ == "__main__":
    generate_posts()